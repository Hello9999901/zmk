/*
* Copyright (c) 2024 Byran Huang, Keychron
*
* SPDX-License-Identifier: MIT
*/

/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>
#include <dt-bindings/zmk/ckled2001.h>
#include <dt-bindings/zmk/matrix_transform.h>

/ {
    model = "keychron_q11_pro";
    compatible = "keychron,q11_pro";

    chosen {
        zephyr,code-partition = &code_partition;
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,console = &cdc_acm_uart; //&cdc_acm_uart;
        zmk,matrix_transform = &default_transform;
        zmk,kscan = &kscan0;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        // columns = <1>;
        // rows = <1>;
        // columns = <7>;
        // rows = <6>;
        // map = <
        // RC(0,0)    RC(0,1)    RC(0,2)    RC(0,3)    RC(0,4)    RC(0,5)    RC(0,6)    RC(0,7)
        // RC(1,0)    RC(1,1)    RC(1,2)    RC(1,3)    RC(1,4)    RC(1,5)    RC(1,6)    RC(1,7)
        // RC(2,0)      RC(2,1)    RC(2,2)    RC(2,3)    RC(2,4)    RC(2,5)    RC(2,6)
        // RC(3,0)      RC(3,1)      RC(3,2)    RC(3,3)    RC(3,4)    RC(3,5)    RC(3,6)
        // RC(4,0)      RC(4,1)        RC(4,2)    RC(4,3)    RC(4,4)    RC(4,5)    RC(4,6)
        // RC(5,0)    RC(5,1)     RC(5,2)     RC(5,3)     RC(5,4)         RC(5,5)
        // >;
        columns = <17>;
        rows = <7>;
        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) /**/  RC(0,8) RC(0,9) RC(0,10) RC(0,11) RC(0,12) RC(0,13) RC(0,14) RC(0,15) RC(0,16)
        RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) /**/          RC(1,9) RC(1,10) RC(1,11) RC(1,12) RC(1,13) RC(1,14) RC(1,15) RC(1,16)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6)         /**/  RC(2,8) RC(2,9) RC(2,10) RC(2,11) RC(2,12) RC(2,13) RC(2,14) RC(2,15) RC(2,16)
        RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6)         /**/          RC(3,9) RC(3,10) RC(3,11) RC(3,12) RC(3,13) RC(3,14) RC(3,15) RC(3,16)
        RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6)         /**/          RC(4,9) RC(4,10) RC(4,11) RC(4,12) RC(4,13) RC(4,14) RC(4,15)
        RC(5,0) RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5)                 /**/          RC(5,9)          RC(5,11) RC(5,12) RC(5,13) RC(5,14) RC(5,15) RC(5,16)
        RC(6,0) RC(6,1) RC(6,2) RC(6,3)
        >;
        // map = <
        //     RC(0, 0)
        // >;
    };

    // led_strip_comp: led-strip-composite {
    //     compatible = "zmk,led-strip-composite";
    //     label = "LED_STRIP_COMP";
    //     chain-length = < 128 >;
    //     strip-0 {
    //         led-strip = < &led_strip_left >;
    //     };
    //     strip-1 {
    //         led-strip = < &led_strip_right >;
    //     };
    // };

    // Following keyboard scan composite driver as per: https: //zmk.dev/docs/config/kscan#example-configuration
   //  kscan0: kscan_composite {
   //      compatible = "zmk,kscan-composite";
   //      label = "KSCAN0";
   //      columns = <9>;
   //      rows = <7>;
   //      matrix {
   //          kscan = <&kscan1>;
   //      };
   //      direct {
   //          kscan = <&kscan2>;
   //          row-offset = <6>;
   //      };
   //  };

    // Keyboard switch matrix
   //  kscan1: kscan_matrix {
   //      compatible = "zmk,kscan-gpio-matrix";
   //      label = "KSCAN";
   //      diode-direction = "col2row";

   //      col-gpios
   //      = <&gpio0 10 (GPIO_ACTIVE_HIGH)> // L_COL_1
   //      , <&gpio0 9 (GPIO_ACTIVE_HIGH)>  // L_COL_2
   //      , <&gpio1 6 (GPIO_ACTIVE_HIGH)>  // L_COL_3
   //      , <&gpio1 4 (GPIO_ACTIVE_HIGH)>  // L_COL_4
   //      , <&gpio1 2 (GPIO_ACTIVE_HIGH)>  // L_COL_5
   //      , <&gpio1 1 (GPIO_ACTIVE_HIGH)>  // L_COL_6
   //      , <&gpio1 0 (GPIO_ACTIVE_HIGH)>  // L_COL_7
   //      , <&gpio0 24 (GPIO_ACTIVE_HIGH)> // L_COL_8
   //      , <&gpio1 10 (GPIO_ACTIVE_HIGH)> // L_COL_9
   //      ;

   //      row-gpios
   //      = <&gpio0 5  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // L_ROW_1
   //      , <&gpio0 6  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // L_ROW_2
   //      , <&gpio0 8  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // L_ROW_3
   //      , <&gpio1 9  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // L_ROW_4
   //      , <&gpio0 12 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // L_ROW_5
   //      , <&gpio0 31 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // L_ROW_6
   //      ;
   //  };

    // Direct GPIO scanning
   //  kscan2: kscan_direct {
   //      compatible = "zmk,kscan-gpio-direct";
   //      toggle-mode;
   //      input-gpios
   //      // MAC/WIN toggle
   //      = <&gpio1 15 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
   //      // SEL toggle
   //      // @TODO: check SEL toggle voltage levels and UX
   //      , <&gpio0 22 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
   //      ;
   //  };

    // @TODO: Implement https: //zmk.dev/docs/behaviors/power
    // External power toggle for SDB pin on CKLED
    // ext-power {
    //         compatible = "zmk,ext-power-generic";
    //         label = "EXT_POWER";
    //         control-gpios = <&gpio1 13 GPIO_ACTIVE_HIGH>;
    //         init-delay-ms = <0>; // Optimize init delay time
    // };

    // EC11 Encoder
    // main_encoder: encoder_main {
    //     compatible = "alps,ec11";
    //     label = "MAIN_ENCODER";
    //     status = "disabled";
    //     a-gpios = <&gpio0 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
    //     b-gpios = <&gpio0 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
    //     resolution = <4>;
    //     steps = <80>;
    // };

    // EC11 Encoder binding
    // sensors {
    //     compatible = "zmk,keymap-sensors";
    //     sensors = <&main_encoder>;
    // };

    // Voltage divider circuit to AIN0
    // vbatt: vbatt {
    //     compatible = "zmk,battery-voltage-divider";
    //     label = "BATTERY";
    //     io-channels = <&adc 0>;  // AIN0
    //     output-ohms = <1000000>; // 1M
    //     full-ohms = <(1000000 + 1000000)>; // 1M + 1M
    // };
};

&adc {
    status = "okay";
};

&gpiote {
    status = "okay";
};

&gpio0 {
    status = "okay";
};

&gpio1 {
    status = "okay";
};

// USB (UART) debugging
&usbd {
    status = "okay";
    cdc_acm_uart: cdc_acm_uart {
        compatible = "zephyr,cdc-acm-uart";
        label = "CDC_ACM_0";
    };
};

// @TODO: perhaps more storage space storage parition not used
&flash0 {
    /*
     * For more information, see:
     * http: //docs.zephyrproject.org/latest/devices/dts/flash_partitions.html
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        sd_partition: partition@0 {
            label = "softdevice";
            reg = <0x00000000 0x00026000>;
        };
        code_partition: partition@26000 {
            label = "code_partition";
            reg = <0x00026000 0x000c6000>;
        };

        /*
         * The flash starting at 0x000ec000 and ending at
         * 0x000f3fff is reserved for use by the application.
         */

        /*
         * Storage partition will be used by FCB/LittleFS/NVS
         * if enabled.
         */
        storage_partition: partition@ec000 {
            label = "storage";
            reg = <0x000ec000 0x00008000>;
        };

        boot_partition: partition@f4000 {
            label = "adafruit_boot";
            reg = <0x000f4000 0x0000c000>;
        };
    };
};
