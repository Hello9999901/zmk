/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;
#include <nordic/nrf52840_qiaa.dtsi>
#include <dt-bindings/zmk/ckled2001.h>
#include <dt-bindings/zmk/matrix_transform.h>

/ {
    model = "keychron_q11_pro";
    compatible = "keychron,q11_pro";

    chosen {
        zephyr,code-partition = &code_partition;
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,console = &cdc_acm_uart; //&cdc_acm_uart;
        zmk,matrix_transform = &default_transform;
        zmk,battery = &vbatt;
        zmk,kscan = &kscan0;
        zmk,underglow = &led_strip;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        // columns = <1>;
        // rows = <1>;
        // columns = <7>;
        // rows = <6>;
        // map = <
        // RC(0,0)    RC(0,1)    RC(0,2)    RC(0,3)    RC(0,4)    RC(0,5)    RC(0,6)    RC(0,7)
        // RC(1,0)    RC(1,1)    RC(1,2)    RC(1,3)    RC(1,4)    RC(1,5)    RC(1,6)    RC(1,7)
        // RC(2,0)      RC(2,1)    RC(2,2)    RC(2,3)    RC(2,4)    RC(2,5)    RC(2,6)
        // RC(3,0)      RC(3,1)      RC(3,2)    RC(3,3)    RC(3,4)    RC(3,5)    RC(3,6)
        // RC(4,0)      RC(4,1)        RC(4,2)    RC(4,3)    RC(4,4)    RC(4,5)    RC(4,6)
        // RC(5,0)    RC(5,1)     RC(5,2)     RC(5,3)     RC(5,4)         RC(5,5)
        // >;
        columns = <9>;
        rows = <7>;
        map = <
        RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(0,5) RC(0,6) RC(0,7) RC(0,8)
        RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5) RC(1,6) RC(1,7) RC(1,8)
        RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5) RC(2,6) RC(2,7) RC(2,8)
        RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5) RC(3,6) RC(3,7) RC(3,8)
        RC(4,1) RC(4,2) RC(4,3) RC(4,4) RC(4,5) RC(4,6) RC(4,7)
        RC(5,1)         RC(5,3) RC(5,4) RC(5,5) RC(5,6) RC(5,7) RC(5,8)
        RC(6,0) RC(6,1)
        >;
        // map = <
        //     RC(0, 0)
        // >;
    };

    // Following keyboard scan composite driver as per: https: //zmk.dev/docs/config/kscan#example-configuration
    kscan0: kscan_composite {
        compatible = "zmk,kscan-composite";
        label = "KSCAN0";
        columns = <9>;
        rows = <7>;
        matrix {
            kscan = <&kscan1>;
        };
        direct {
            kscan = <&kscan2>;
            row-offset = <6>;
        };
    };

    // Keyboard switch matrix
    kscan1: kscan_matrix {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "col2row";

        col-gpios
        = <&gpio0 10 (GPIO_ACTIVE_HIGH)> // L_COL_1
        , <&gpio0 9 (GPIO_ACTIVE_HIGH)>  // L_COL_2
        , <&gpio1 6 (GPIO_ACTIVE_HIGH)>  // L_COL_3
        , <&gpio1 4 (GPIO_ACTIVE_HIGH)>  // L_COL_4
        , <&gpio1 2 (GPIO_ACTIVE_HIGH)>  // L_COL_5
        , <&gpio1 1 (GPIO_ACTIVE_HIGH)>  // L_COL_6
        , <&gpio1 0 (GPIO_ACTIVE_HIGH)>  // L_COL_7
        , <&gpio0 24 (GPIO_ACTIVE_HIGH)> // L_COL_8
        , <&gpio1 10 (GPIO_ACTIVE_HIGH)> // L_COL_9
        ;

        row-gpios
        = <&gpio0 5  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // L_ROW_1
        , <&gpio0 6  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // L_ROW_2
        , <&gpio0 8  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // L_ROW_3
        , <&gpio1 9  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>  // L_ROW_4
        , <&gpio0 12 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // L_ROW_5
        , <&gpio0 31 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)> // L_ROW_6
        ;
    };

    // Direct GPIO scanning
    kscan2: kscan_direct {
        compatible = "zmk,kscan-gpio-direct";
        toggle-mode;
        input-gpios
        // MAC/WIN toggle
        = <&gpio1 15 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
        // SEL toggle
        // @TODO: check SEL toggle voltage levels and UX
        , <&gpio0 22 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
        ;
    };

    // @TODO: Implement https: //zmk.dev/docs/behaviors/power
    // External power toggle for SDB pin on CKLED
    // ext-power {
    //         compatible = "zmk,ext-power-generic";
    //         label = "EXT_POWER";
    //         control-gpios = <&gpio1 13 GPIO_ACTIVE_HIGH>;
    //         init-delay-ms = <0>; // Optimize init delay time
    // };

    // EC11 Encoder
    main_encoder: encoder_main {
        compatible = "alps,ec11";
        label = "MAIN_ENCODER";
        status = "disabled";
        a-gpios = <&gpio0 13 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&gpio0 15 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        resolution = <4>;
        steps = <80>;
    };

    // EC11 Encoder binding
    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&main_encoder>;
    };

    // Voltage divider circuit to AIN0
    vbatt: vbatt {
        compatible = "zmk,battery-voltage-divider";
        label = "BATTERY";
        io-channels = <&adc 0>;  // AIN0
        output-ohms = <1000000>; // 1M
        full-ohms = <(1000000 + 1000000)>; // 1M + 1M
    };
};

&adc {
    status = "okay";
};

&gpiote {
    status = "okay";
};

&gpio0 {
    status = "okay";
};

&gpio1 {
    status = "okay";
};

&pinctrl {
    i2c0_default: i2c0_default {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 26)>,
                    <NRF_PSEL(TWIM_SCL, 0, 27)>;
        };
    };

    i2c0_sleep: i2c0_sleep {
        group1 {
            psels = <NRF_PSEL(TWIM_SDA, 0, 26)>,
                    <NRF_PSEL(TWIM_SCL, 0, 27)>;
            low-power-enable;
        };
    };
};

&i2c0 {
    compatible = "nordic,nrf-twi";
    pinctrl-0 = <&i2c0_default>;
    pinctrl-1 = <&i2c0_sleep>;
    pinctrl-names = "default", "sleep";
    status = "okay";

    // Standard I2C speed of 400kHz
    clock-frequency = <DT_FREQ_K(400)>;

    led_strip: ckled2001@74 {
        compatible = "zmk,ckled2001";
        label = "LED_STRIP";
        reg = <0x74>;
        // ALL CALL
        chain-length = < 64 >;
        map = <
        CK(0, 0) CK(1, 0) CK(2, 0)
        CK(3, 0) CK(4, 0) CK(5, 0)
        CK(6, 0) CK(7, 0) CK(8, 0)
        CK(9, 0) CK(10, 0) CK(11, 0)

        CK(0, 1) CK(1, 1) CK(2, 1)
        CK(3, 1) CK(4, 1) CK(5, 1)
        CK(6, 1) CK(7, 1) CK(8, 1)
        CK(9, 1) CK(10, 1) CK(11, 1)

        CK(0, 2) CK(1, 2) CK(2, 2)
        CK(3, 2) CK(4, 2) CK(5, 2)
        CK(6, 2) CK(7, 2) CK(8, 2)
        CK(9, 2) CK(10, 2) CK(11, 2)

        CK(0, 3) CK(1, 3) CK(2, 3)
        CK(3, 3) CK(4, 3) CK(5, 3)
        CK(6, 3) CK(7, 3) CK(8, 3)
        CK(9, 3) CK(10, 3) CK(11, 3)

        CK(0, 4) CK(1, 4) CK(2, 4)
        CK(3, 4) CK(4, 4) CK(5, 4)
        CK(6, 4) CK(7, 4) CK(8, 4)
        CK(9, 4) CK(10, 4) CK(11, 4)

        CK(0, 5) CK(1, 5) CK(2, 5)
        CK(3, 5) CK(4, 5) CK(5, 5)
        CK(6, 5) CK(7, 5) CK(8, 5)
        CK(9, 5) CK(10, 5) CK(11, 5)

        CK(0, 6) CK(1, 6) CK(2, 6)
        CK(3, 6) CK(4, 6) CK(5, 6)
        CK(6, 6) CK(7, 6) CK(8, 6)
        CK(9, 6) CK(10, 6) CK(11, 6)

        CK(0, 7) CK(1, 7) CK(2, 7)
        CK(3, 7) CK(4, 7) CK(5, 7)
        CK(6, 7) CK(7, 7) CK(8, 7)
        CK(9, 7) CK(10, 7) CK(11, 7)

        CK(0, 8) CK(1, 8) CK(2, 8)
        CK(3, 8) CK(4, 8) CK(5, 8)
        CK(6, 8) CK(7, 8) CK(8, 8)
        CK(9, 8) CK(10, 8) CK(11, 8)

        CK(0, 9) CK(1, 9) CK(2, 9)
        CK(3, 9) CK(4, 9) CK(5, 9)
        CK(6, 9) CK(7, 9) CK(8, 9)
        CK(9, 9) CK(10, 9) CK(11, 9)

        CK(0, 10) CK(1, 10) CK(2, 10)
        CK(3, 10) CK(4, 10) CK(5, 10)
        CK(6, 10) CK(7, 10) CK(8, 10)
        CK(9, 10) CK(10, 10) CK(11, 10)

        CK(0, 11) CK(1, 11) CK(2, 11)
        CK(3, 11) CK(4, 11) CK(5, 11)
        CK(6, 11) CK(7, 11) CK(8, 11)
        CK(9, 11) CK(10, 11) CK(11, 11)

        CK(0, 12) CK(1, 12) CK(2, 12)
        CK(3, 12) CK(4, 12) CK(5, 12)
        CK(6, 12) CK(7, 12) CK(8, 12)
        CK(9, 12) CK(10, 12) CK(11, 12)

        CK(0, 13) CK(1, 13) CK(2, 13)
        CK(3, 13) CK(4, 13) CK(5, 13)
        CK(6, 13) CK(7, 13) CK(8, 13)
        CK(9, 13) CK(10, 13) CK(11, 13)
        >;

        // // RIGHT CONFIG
        // chain-length = <47>;
        // map = <
        // /* ROW 0 */
        // /* Configuration: CK(SW, CS) */
        // /*   R        G        B */
        // CK(0, 12) CK(1, 12)  CK(2, 12)
        // CK(3, 13) CK(4, 12)  CK(5, 12)
        // CK(6, 13) CK(7, 12)  CK(8, 12)
        // CK(9, 13) CK(10, 12) CK(11, 12)

        // CK(0, 6) CK(1, 6) CK(2, 6)
        // CK(3, 6) CK(4, 6) CK(5, 6)
        // CK(6, 6) CK(7, 6) CK(8, 6)
        // /* ROW 1 */
        // /*   R        G        B */
        // CK(0, 11) CK(1, 11) CK(2, 11)
        // CK(3, 11) CK(4, 11) CK(5, 11)
        // CK(6, 11) CK(7, 11) CK(8, 11)
        // CK(9, 11) CK(10, 11) CK(11, 11)

        // CK(0, 5) CK(1, 5) CK(2, 5)
        // CK(3, 6) CK(4, 5) CK(5, 5)
        // CK(6, 6) CK(7, 5) CK(8, 5)
        // /* ROW 2 */
        // /*   R        G        B */
        // CK(0, 10) CK(1, 10) CK(2, 10)
        // CK(3, 10) CK(4, 10) CK(5, 10)
        // CK(6, 10) CK(7, 10) CK(8, 10)
        // CK(9, 10) CK(10, 10) CK(11, 10)

        // CK(0, 4) CK(1, 4) CK(2, 4)
        // CK(3, 4) CK(4, 4) CK(5, 4)
        // CK(6, 4) CK(7, 4) CK(8, 4)
        // CK(9, 4) CK(10, 4) CK(11, 4)

        // /* ROW 3 */
        // /*   R        G        B */
        // CK(0, 9) CK(1, 9) CK(2, 9)
        // CK(3, 9) CK(4, 9) CK(5, 9)
        // CK(6, 9) CK(7, 9) CK(8, 9)
        // CK(9, 9) CK(10, 9) CK(11, 9)

        // CK(0, 3) CK(1, 3) CK(2, 3)
        // CK(3, 3) CK(4, 3) CK(5, 3)
        // CK(6, 3) CK(7, 3) CK(8, 3)
        // /* ROW 4 */
        // /*   R        G        B */
        // CK(0, 8) CK(1, 8) CK(2, 8)
        // CK(3, 8) CK(4, 8) CK(5, 8)
        // CK(6, 8) CK(7, 8) CK(8, 8)
        // CK(9, 8) CK(10, 8) CK(11, 8)

        // CK(0, 2) CK(1, 2) CK(2, 2)
        // CK(3, 2) CK(4, 2) CK(5, 2)
        // CK(6, 2) CK(7, 2) CK(8, 2)
        // CK(9, 2) CK(10, 2) CK(11, 2)

        // /* ROW 5 */
        // /*   R        G        B */
        // CK(0, 7) CK(1, 7) CK(2, 7)
        // CK(3, 7) CK(4, 7) CK(5, 7)
        // CK(6, 7) CK(7, 7) CK(8, 7)

        // CK(0, 1) CK(1, 1) CK(2, 1)
        // CK(3, 1) CK(4, 1) CK(5, 1)
        // CK(6, 1) CK(7, 1) CK(8, 1)
        // CK(9, 1) CK(10, 1) CK(11, 1)

        // /* Side Keys */
        // /*   R        G        B */
        // CK(0, 0) CK(1, 0) CK(2, 0)
        // CK(3, 0) CK(4, 0) CK(5, 0)
        // CK(6, 0) CK(7, 0) CK(8, 0)
        // >;

        // LEFT CONFIG
        // chain-length = <42>;
        // map = <
        // /* ROW 0 */
        // /* Configuration: CK(SW, CS) */
        // /*   R        G        B */
        // CK(0, 13) CK(1, 13)  CK(2, 13)
        // CK(3, 13) CK(4, 13)  CK(5, 13)
        // CK(6, 13) CK(7, 13)  CK(8, 13)
        // CK(9, 13) CK(10, 13) CK(11, 13)

        // CK(0, 7) CK(1, 7) CK(2, 7)
        // CK(3, 7) CK(4, 7) CK(5, 7)
        // CK(6, 7) CK(7, 7) CK(8, 7)
        // /* ROW 1 */
        // /*   R        G        B */
        // CK(0, 12) CK(1, 12) CK(2, 12)
        // CK(3, 12) CK(4, 12) CK(5, 12)
        // CK(6, 12) CK(7, 12) CK(8, 12)
        // CK(9, 12) CK(10, 12) CK(11, 12)

        // CK(0, 6) CK(1, 6) CK(2, 6)
        // CK(3, 6) CK(4, 6) CK(5, 6)
        // CK(6, 6) CK(7, 6) CK(8, 6)
        // /* ROW 2 */
        // /*   R        G        B */
        // CK(0, 11) CK(1, 11) CK(2, 11)
        // CK(3, 11) CK(4, 11) CK(5, 11)
        // CK(6, 11) CK(7, 11) CK(8, 11)
        // CK(9, 11) CK(10, 11) CK(11, 11)

        // CK(0, 5) CK(1, 5) CK(2, 5)
        // CK(3, 5) CK(4, 5) CK(5, 5)

        // /* ROW 3 */
        // /*   R        G        B */
        // CK(0, 10) CK(1, 10) CK(2, 10)
        // CK(3, 10) CK(4, 10) CK(5, 10)
        // CK(6, 10) CK(7, 10) CK(8, 10)
        // CK(9, 10) CK(10, 10) CK(11, 10)

        // CK(0, 4) CK(1, 4) CK(2, 4)
        // CK(3, 4) CK(4, 4) CK(5, 4)
        // /* ROW 4 */
        // /*   R        G        B */
        // CK(0, 9) CK(1, 9) CK(2, 9)
        // CK(3, 9) CK(4, 9) CK(5, 9)
        // CK(6, 9) CK(7, 9) CK(8, 9)
        // CK(9, 9) CK(10, 9) CK(11, 9)

        // CK(0, 3) CK(1, 3) CK(2, 3)
        // CK(3, 3) CK(4, 3) CK(5, 3)
        // /* ROW 5 */
        // /*   R        G        B */
        // CK(0, 8) CK(1, 8) CK(2, 8)
        // CK(3, 8) CK(4, 8) CK(5, 8)
        // CK(6, 8) CK(7, 8) CK(8, 8)
        // CK(9, 8) CK(10, 8) CK(11, 8)

        // CK(0, 2) CK(1, 2) CK(2, 2)
        // /* M1 - M5 */
        // /*   R        G        B */
        // CK(0, 1) CK(1, 1) CK(2, 1)
        // CK(3, 1) CK(4, 1) CK(5, 1)
        // CK(6, 1) CK(7, 1) CK(8, 1)
        // CK(9, 1) CK(10, 1) CK(11, 1)

        // CK(0, 0) CK(1, 0) CK(2, 0)
        // >;
    };
};

// USB (UART) debugging
&usbd {
    status = "okay";
    cdc_acm_uart: cdc_acm_uart {
        compatible = "zephyr,cdc-acm-uart";
        label = "CDC_ACM_0";
    };
};

// @TODO: perhaps more storage space storage parition not used
&flash0 {
    /*
     * For more information, see:
     * http: //docs.zephyrproject.org/latest/devices/dts/flash_partitions.html
     */
    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        sd_partition: partition@0 {
            label = "softdevice";
            reg = <0x00000000 0x00026000>;
        };
        code_partition: partition@26000 {
            label = "code_partition";
            reg = <0x00026000 0x000c6000>;
        };

        /*
         * The flash starting at 0x000ec000 and ending at
         * 0x000f3fff is reserved for use by the application.
         */

        /*
         * Storage partition will be used by FCB/LittleFS/NVS
         * if enabled.
         */
        storage_partition: partition@ec000 {
            label = "storage";
            reg = <0x000ec000 0x00008000>;
        };

        boot_partition: partition@f4000 {
            label = "adafruit_boot";
            reg = <0x000f4000 0x0000c000>;
        };
    };
};
